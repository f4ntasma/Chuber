generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String
  passwordHash     String
  role             String           @default("user")
  image            String?
  createdAt        DateTime         @default(now())
  trialEndsAt      DateTime?
  subscriptionActive Boolean        @default(false)

  providerProfile  ProviderProfile?
  likes            Like[]
  messagesSent     Message[]        @relation("messagesSent")
  messagesReceived  Message[]        @relation("messagesReceived")
  subscriptions    Subscription[]
  payments         Payment[]
  notifications    Notification[]
}

model ProviderProfile {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
  specialty  String?
  priceRange String?
  image      String?
  lat        Float?
  lng        Float?
  rating     Float?    @default(4.8)
  reviews    Int?      @default(0)
  available  Boolean   @default(true)
  likes      Like[]
}

model Like {
  id         String          @id @default(cuid())
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  provider   ProviderProfile @relation(fields: [providerId], references: [id])
  providerId String

  @@unique([userId, providerId])
}

model Message {
  id         String   @id @default(cuid())
  fromUser   User     @relation("messagesSent", fields: [fromUserId], references: [id])
  fromUserId String
  toUser     User     @relation("messagesReceived", fields: [toUserId], references: [id])
  toUserId   String
  content    String
  createdAt  DateTime @default(now())
}

model Subscription {
  id               String    @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  provider         String?   // stripe price id or plan
  status           String    @default("inactive")
  currentPeriodEnd DateTime?
}

model Payment {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  amount     Int
  currency   String   @default("PEN")
  method     String   @default("yape")
  reference  String
  status     String   @default("pending") // pending | approved | rejected
  createdAt  DateTime @default(now())
  approvedAt DateTime?

  @@index([userId, status])
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // like | message | payment
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, read])
}